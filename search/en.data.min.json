[{"id":0,"href":"/TracerTutorial/usage/core/","title":"Core","parent":"Usage","content":"in video\n1, 找生成的代码时不用 ` 开头\n2, val xx get() = 某个 tracerPro 前的修饰符只能为 private\n3, 如果一个类如果可能在 mallTracer 或者 out mallTracer 下，那么直接 @Nodes(Mall::class)\n4, 解释 common type 的标准\n5, alias type 中带 * 可能会因为 multi-bounds 导致结果不准确\n6, 因为每次输入_时出来的提示较多，所以建议在外部用 private val xx get()＝声明\n7, 用 get()= 不用 =，这样则不用关心其是否为 mutable\n8, 某些 property 会被忽略 9, 对于带泛型 / open / abstract class, 因为复用率高，不会从 property type trace, 对于会被多次构造的 class，应让 programmer 尽量少去探索次内部的东西\n","description":"in video\n1, 找生成的代码时不用 ` 开头\n2, val xx get() = 某个 tracerPro 前的修饰符只能为 private\n3, 如果一个类如果可能在 mallTracer 或者 out mallTracer 下，那么直接 @Nodes(Mall::class)\n4, 解释 common type 的标准\n5, alias type 中带 * 可能会因为 multi-bounds 导致结果不准确\n6, 因为每次输入_时出来的提示较多，所以建议在外部用 private val xx get()＝声明\n7, 用 get()= 不用 =，这样则不用关心其是否为 mutable\n8, 某些 property 会被忽略 9, 对于带泛型 / open / abstract class, 因为复用率高，不会从 property type trace, 对于会被多次构造的 class，应让 programmer 尽量少去探索次内部的东西"},{"id":1,"href":"/TracerTutorial/preview/","title":"Preview","parent":"","content":" The wifi router is attainable everywhere in the house.\n","description":"The wifi router is attainable everywhere in the house."},{"id":2,"href":"/TracerTutorial/usage/details/","title":"Details","parent":"Usage","content":"1，Declare 的用法 2，支持 var 3, 各种符号代表的意思 ","description":"1，Declare 的用法 2，支持 var 3, 各种符号代表的意思 "},{"id":3,"href":"/TracerTutorial/setup/","title":"Setup","parent":"","content":"Configure your build.gradle as below.\nadd the ksp plugin plugins{ // Assuming your kotlin version is `1.7.21`, here uses the latest ksp plugin version beginning // with `1.7.21` (\u0026#39;1.7.21-1.0.8\u0026#39;). id \u0026#39;com.google.devtools.ksp\u0026#39; version \u0026#39;1.7.21-1.0.8\u0026#39; } add source sets Skip this step if your ksp plugin version is \u0026lsquo;1.8.0-1.0.9\u0026rsquo; or higher.\nThis part is different if you are using IntelliJ IDEA and KSP in a Gradle plugin. (See ksp quickstart)\n// Omissible if your ksp plugin version is \u0026#39;1.8.0-1.0.9\u0026#39; or higher. kotlin.sourceSets { main.kotlin.srcDirs += \u0026#34;$buildDir/generated/ksp/main/kotlin\u0026#34; test.kotlin.srcDirs += \u0026#34;$buildDir/generated/ksp/test/kotlin\u0026#34; } configure tracer Add this part directly, rather than insert messily.\n//region tracer // options ksp{ // arg(\u0026#34;tracer.allInternal\u0026#34;, \u0026#34;\u0026#34;) // arg(\u0026#34;tracer.propertiesFullName\u0026#34;, \u0026#34;\u0026#34;) } tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { kotlinOptions.freeCompilerArgs += \u0026#39;-Xcontext-receivers\u0026#39; } dependencies { // Keep this version latest with the prefix lower than your kotlin version(inclusive). ksp \u0026#39;io.github.apollokwok:tracer-common-compiler:1.7.20-1.1.0\u0026#39; // Keep this version latest but lower than the version above(inclusive). implementation \u0026#39;io.github.apollokwok:tracer-common-annotations:1.7.20-1.1.0\u0026#39; } //endregion ","description":"Configure your build.gradle as below.\nadd the ksp plugin plugins{ // Assuming your kotlin version is `1.7.21`, here uses the latest ksp plugin version beginning // with `1.7.21` (\u0026#39;1.7.21-1.0.8\u0026#39;). id \u0026#39;com.google.devtools.ksp\u0026#39; version \u0026#39;1.7.21-1.0.8\u0026#39; } add source sets Skip this step if your ksp plugin version is \u0026lsquo;1.8.0-1.0.9\u0026rsquo; or higher.\nThis part is different if you are using IntelliJ IDEA and KSP in a Gradle plugin. (See ksp quickstart)\n// Omissible if your ksp plugin version is \u0026#39;1."},{"id":4,"href":"/TracerTutorial/usage/notes/","title":"Notes","parent":"Usage","content":"1, Kotlin Native and Kotlin JS are not supported. Because they lack context receiver which is essential in this tool.\n2, If you are developing android, see tracer extension on traditional android after you learned this.\n3, Syntax T \u0026amp; Any is not allowed until ksp version 1.8.0-1.0.9. In old versions, you could annotate those traceable properties or super types with @Tracer.Declare(false) to omit them.\n4, Tracer is compatible with ksp 1.7.0-1.0.6 at least. Although mostly it works well with ksp, you\u0026rsquo;d better try to make your ksp plugin in a high stable version, since ksp api is not stable and many bugs are fixed every version.\n5, Java files are forbidden to use Tracer, because I don\u0026rsquo;t want to spend time analyzing those outdated things. But it\u0026rsquo;s absolutely safe to call java classes and functions in kotlin files with tracer.\n6, Few generated types fail code inspection, mostly because of the imperfect authoritative type inference system. Find their corresponding source properties or super types, then use another type or annotate them with`@Tracer.Declare(false)`. e.g.: todo\n7, 如果 super abstract class 和 self 均有 Root /Nodes 标记，那么 super abstract class 中最好不要 override self\n","description":"1, Kotlin Native and Kotlin JS are not supported. Because they lack context receiver which is essential in this tool.\n2, If you are developing android, see tracer extension on traditional android after you learned this.\n3, Syntax T \u0026amp; Any is not allowed until ksp version 1.8.0-1.0.9. In old versions, you could annotate those traceable properties or super types with @Tracer.Declare(false) to omit them.\n4, Tracer is compatible with ksp 1."},{"id":5,"href":"/TracerTutorial/usage/","title":"Usage","parent":"","content":"","description":""},{"id":6,"href":"/TracerTutorial/expectedOptimization/","title":"Expected optimization","parent":"","content":"1, Too many hints when you input _X. in a big project. (after the visibility, of functions with context receivers, is fixed -\u0026gt; new generated tracer property would replace the receiver with context receiver. Then there wouldn\u0026rsquo;t be redundant hints.)\n2, names may change with the structure.\n-\u0026gt; 新的变更名字模式，实际值为 contractedName_packageName(_levelTag)_containerName_propertyName。 根据当前的实际需要来显示。且后台给每个 context 分配出一套提示\n3, 针对 property 重写问题，如\n@Tracer.Root class X : XTracer{ abstract val j: J } @Tracer.Root class XImpl : X(), XImplTracer{ override val j: J = J() } 结合2，如果有重写，则父类相应的 val XTracer.j inline get() = ... 不对 XImplTracer 可见\n4, Implement tracer interfaces automatically.\n5, Override and solve the conflict automatically.\n","description":"1, Too many hints when you input _X. in a big project. (after the visibility, of functions with context receivers, is fixed -\u0026gt; new generated tracer property would replace the receiver with context receiver. Then there wouldn\u0026rsquo;t be redundant hints.)\n2, names may change with the structure.\n-\u0026gt; 新的变更名字模式，实际值为 contractedName_packageName(_levelTag)_containerName_propertyName。 根据当前的实际需要来显示。且后台给每个 context 分配出一套提示\n3, 针对 property 重写问题，如\n@Tracer.Root class X : XTracer{ abstract val j: J } @Tracer.Root class XImpl : X(), XImplTracer{ override val j: J = J() } 结合2，如果有重写，则父类相应的 val XTracer."},{"id":7,"href":"/TracerTutorial/myWords/","title":"My words","parent":"","content":"Code in this project is probably the globally best at present for its functionality, creativity, difficulty, structure, efficiency, concision, and beauty. Wish you could learn from it！\nThis tool would help manage memory well assuming Kotlin is without GC, because most nodes only need to manage its own element memories. In the near future, programming languages would be unified and the whole IT development structure would be rebuilt.\nIn addition to this, I have two other halfway done works and am waiting for some company to help make IDE plugins. I have sent resumes to common top internet companies, but those limited resume sizes are too small and they didn\u0026rsquo;t give me opportunities to display.\nAt last, if you are familiar with IT, feel hard to learn Kotlin and love Java or Go more, your logic ability mustn\u0026rsquo;t be well enough for you to engage in IT. If so, do something you love and must excel at. I have no offensive intention, just meaning everyone has his strengths and weaknesses, and every job has its threshold.\n","description":"Code in this project is probably the globally best at present for its functionality, creativity, difficulty, structure, efficiency, concision, and beauty. Wish you could learn from it！\nThis tool would help manage memory well assuming Kotlin is without GC, because most nodes only need to manage its own element memories. In the near future, programming languages would be unified and the whole IT development structure would be rebuilt.\nIn addition to this, I have two other halfway done works and am waiting for some company to help make IDE plugins."},{"id":8,"href":"/TracerTutorial/","title":"","parent":"","content":"Tracer generates extensional properties orienting to inner traceable elements with little configuration.\n","description":"Tracer generates extensional properties orienting to inner traceable elements with little configuration."},{"id":9,"href":"/TracerTutorial/_notes/","title":"_Notes","parent":"","content":"code with line numbers 1 2 # some code echo \u0026#34;Hello World\u0026#34; icon button Get Home Contribute Left Content Dolor sit, sumo unique argument um no \u0026hellip; Mid Content Dolor sit, sumo unique argument um no \u0026hellip; Right Content Dolor sit, sumo unique argument um no \u0026hellip; Content ↕ Markdown content Dolor sit, sumo unique … GitHub Markdown content\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. :note-caption: pass:[🔥]\n[NOTE] It\u0026rsquo;s possible to use Unicode glyphs as admonition icons.\n","description":"code with line numbers 1 2 # some code echo \u0026#34;Hello World\u0026#34; icon button Get Home Contribute Left Content Dolor sit, sumo unique argument um no \u0026hellip; Mid Content Dolor sit, sumo unique argument um no \u0026hellip; Right Content Dolor sit, sumo unique argument um no \u0026hellip; Content ↕ Markdown content Dolor sit, sumo unique … GitHub Markdown content\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture."},{"id":10,"href":"/TracerTutorial/tags/","title":"Tags","parent":"","content":"","description":""}]